name: Release Pipeline

on:
  push:
    branches:
      - main
      - feature/*
      - fix/*

#env:
#    NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  check-behind-main:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fetch all branches
      run: git fetch origin
    
    - name: Check if branch is behind main
      id: check_behind
      run: |
        if git merge-base --is-ancestor origin/main HEAD; then
          echo "Branch is up to date with main."
          echo "::set-output name=behind::false"
        else
          echo "Your branch is behind the main branch. Please rebase your changes.""
          echo "::set-output name=behind::true"
        fi
    
    - name: Fail if behind main
      if: steps.check_behind.outputs.behind == 'true'
      run: |
        echo "Your branch is behind the main branch. Please rebase your changes."
        exit 1


  run-unit-tests:
    name: Run Unit Tests
    needs: check-behind-main
    runs-on: ubuntu-latest
    env:
        CI: true
    steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-node@v3
          with:
            node-version: 16
            registry-url: 'https://npm.pkg.github.com'
            scope: '@serenaandlily'
        - name: npm install and build
          run: |
            npm install
            npm run build --if-present
            npm test
  build:
    name: Build Lambda
    runs-on: ubuntu-latest
    needs: run-unit-tests
    steps:
      - name: build and zip
        run: |
          echo "Building lambda artifact."
          zip -r t.zip
  
  # test auto-rebase against main. fail build if rebase conflict occurs
  

  deploy-develop:
    name: Deploy Develop
    runs-on: ubuntu-latest
    needs: build
    if: success() # Only deploy if tests passed
    env:
      name: develop
    steps:
      - name: Deploy to Develop
        run: |
          echo "Deploying to the Develop environment."
          echo "Develop secret is: ${{ secrets.DEVELOP_TEST_KEY }}"
  
  run-regression:
    name: Run Regression
    runs-on: ubuntu-latest
    needs: deploy-develop
    # name: Run Manual Regression on: workflow_dispatch: inputs: name: choice: drop down with dev or qa
    if: ${{ github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout Regression Code
        uses: actions/checkout@v3
        with:
          repository: 'serenaandlily/sl-testing-automation'
          ref: main  # locally it's on Dev TODO: check running on main
          token: $${{ secrets.GITHUB_TOKEN }}
          path: 'sl-testing-automation'
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Configure Environment
        run: cp src/config/env/env_base_github_secrets.json src/config/env/env_base.json

      - name: Run Regression Suite
        run: mvn -Dsurefire.rerunFailingTestsCount=2 test -DsuitePath=suites/panel/regression.xml

  deploy-qa:
    name: Deploy QA
    runs-on: ubuntu-latest
    needs: run-regression
    env:
      name: qa
    steps:
      - name: Deploy to QA
        run: |
          echo "Deploying to the QA environment."
          echo "QA secret is: ${{ secrets.QA_TEST_KEY }}"