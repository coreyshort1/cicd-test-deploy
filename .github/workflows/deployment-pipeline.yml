name: Release Pipeline

on:
  push:
    branches:
      - main
      - feature/* # add condition 
      - fix/*

env:
    VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  run-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    env:
        CI: true
    steps:
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Cache node modules
          uses: actions/setup-node@v3
          with:
            node-version: 16
            cache: 'npm'
            cache-dependency-path: package-lock.json
            registry-url: 'https://npm.pkg.github.com'
            #scope: '@serenaandlily'
        
        - name: npm install dependencies
          run: |
            npm install
            npm test
  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: run-unit-tests
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: package-lock.json
          registry-url: 'https://npm.pkg.github.com'
          #scope: '@serenaandlily'
      - name: Install Vercel CLI
        run: |
          npm install
          npm install -g vercel@latest

      - name: Pull Vercel Project Settings
        # npx vercel env pull .env.development --token $VERCEL_TOKEN -> vercel link or configure differently
        run: |
          npx vercel pull --yes --environment=development --token $VERCEL_TOKEN
          cat .vercel/.env.development.local
          npx vercel pull --yes --environment=preview --token $VERCEL_TOKEN
          cat .vercel/.env.preview.local
          npx vercel pull --yes --environment=production --token $VERCEL_TOKEN
          cat .vercel/.env.production.local
          cat ~/work/cicd-test-deploy/cicd-test-deploy/.vercel/project.json
      
      - name: Run Vercel Build
        run: npx vercel build
  
  # test auto-rebase against main. fail build if rebase conflict occurs

  deploy-develop:
    name: Deploy Develop
    runs-on: ubuntu-latest
    needs: build
    if: success() # Only deploy if tests passed
    env:
      name: develop
    steps:
      - name: Deploy to Develop
        run: |
          echo "Deploying to the Develop environment."
          //echo "Develop secret is: ${{ secrets.DEVELOP_TEST_KEY }}"
  

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: deploy-develop
    env:
      name: staging
    steps:
      - name: Deploy to Staging
        run: |
          echo "Deploying to the QA environment."
          echo "Staging secret is: ${{ secrets.QA_TEST_KEY }}"