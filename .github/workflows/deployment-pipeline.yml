name: Release Pipeline

on:
  push:
    branches:
      - main
      - feature/* # add condition 
      - fix/*

env:
    VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  run-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    env:
        CI: true
    steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-node@v3
          with:
            node-version: 16
            registry-url: 'https://npm.pkg.github.com'
            #scope: '@serenaandlily'
        - name: npm install and build
          run: |
            npm install
            npm run build --if-present
            npm test
            npm ls
  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: run-unit-tests
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Vercel CLI
        run: |
          npm install -g vercel@latest
          npm ls

      - name: Pull Vercel Project Settings
        # npx vercel env pull .env.development --token $VERCEL_TOKEN -> vercel link or configure differently
        run: |
          npx vercel pull --yes --environment=development --token $VERCEL_TOKEN
          cat .vercel/.env.development.local
          npx vercel pull --yes --environment=preview --token $VERCEL_TOKEN
          cat .vercel/.env.preview.local
          npx vercel pull --yes --environment=production --token $VERCEL_TOKEN
          cat .vercel/.env.production.local
          cat ~/work/cicd-test-deploy/cicd-test-deploy/.vercel/project.json
      
      - name: Run Vercel Build
        run: npx vercel build
  
  # test auto-rebase against main. fail build if rebase conflict occurs

  deploy-develop:
    name: Deploy Develop
    runs-on: ubuntu-latest
    needs: build
    if: success() # Only deploy if tests passed
    env:
      name: develop
    steps:
      - name: Deploy to Develop
        run: |
          echo "Deploying to the Develop environment."
          //echo "Develop secret is: ${{ secrets.DEVELOP_TEST_KEY }}"
  
  run-regression:
    name: Run Regression
    runs-on: ubuntu-latest
    needs: deploy-develop
    # name: Run Manual Regression on: workflow_dispatch: inputs: name: choice: drop down with dev or qa
    if: ${{ github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout Regression Code
        uses: actions/checkout@v3
        with:
          repository: 'serenaandlily/sl-testing-automation'
          ref: main  # locally it's on Develop. TODO: check running on main
          token: $${{ secrets.GITHUB_TOKEN }}
          path: 'sl-testing-automation'
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Configure Environment
        run: cp src/config/env/env_base_github_secrets.json src/config/env/env_base.json

      - name: Run Regression Suite
        run: mvn -Dsurefire.rerunFailingTestsCount=2 test -DsuitePath=suites/panel/regression.xml

  deploy-qa:
    name: Deploy QA
    runs-on: ubuntu-latest
    needs: run-regression
    env:
      name: qa
    steps:
      - name: Deploy to QA
        run: |
          echo "Deploying to the QA environment."
          echo "QA secret is: ${{ secrets.QA_TEST_KEY }}"